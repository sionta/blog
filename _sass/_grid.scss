@use "sass:map";
@use "sass:math";
@use "utils" as *;

/**
 * Base on Gridism by @cobyism
 * https://github.com/cobyism/gridism
 */

.wrap,
.grid,
.unit {
  box-sizing: border-box;
}

.wrap {
  // width: map.get($breakpoints, xl);
  max-width: map.get($breakpoints, xl-s);
  margin: 0 auto;
}

.grid {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
}

.unit {
  padding: $spacing-unit * 0.5;
  flex: 0 0 100%;
  width: 100%;

  &.post {
    flex: 0 0 75%;
    width: 75%;
  }

  &.side {
    @extend .hide-on-mobiles;
    flex: 0 0 25%;
    width: 25%;
  }

  // @for $i from 1 through 12 {
  //   &.w-#{$i} {
  //     flex: 0 0 calc(100% / 12 * $i);
  //     width: calc(100% / 12 * $i);
  //   }
  // }

  &:first-child {
    padding-left: $spacing-unit;
  }
  &:last-child {
    padding-right: $spacing-unit;
  }
  & &:first-child {
    padding-left: 0;
  }
  & &:last-child {
    padding-right: 0;
  }

  & .grid:first-child > & {
    padding-top: 0;
  }
  & .grid:last-child > & {
    padding-bottom: 0;
  }

  .no-gutters &,
  &.no-gutters {
    padding: 0 !important;
  }
}

.hide-on-desktop,
.only-on-mobiles {
  display: none !important;
}

@media screen and (max-width: $min-width) {
  .grid {
    flex-direction: column;
  }

  .grid:not(.no-stacking-on-mobiles) > .unit {
    width: 100% !important;
    padding-left: $spacing-unit;
    padding-right: $spacing-unit;
  }

  .unit .grid .unit {
    padding-left: 0px;
    padding-right: 0px;
  }

  .only-on-desktop,
  .hide-on-mobiles {
    display: none !important;
  }

  .hide-on-desktop,
  .only-on-mobiles {
    display: block !important;
  }
}
