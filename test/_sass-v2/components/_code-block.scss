@use "../mixins" as *;
@use "../variables" as *;

/**
 * Code formating
 */
.key,
kbd,
pre,
code {
  font-family: $font-mono;
  font-size: 0.9375em;
  border: 1px solid var(--bd-1);
  border-radius: 3px;
  background: var(--bg-1);
}

code {
  padding: 1px 5px;
}

pre {
  padding: 8px 12px;
  overflow-x: auto;
  border: 0;

  .lineno,
  > code {
    border: 0;
    padding-right: 0;
    padding-left: 0;
  }
}

.highlight {
  border-radius: 3px;
  background: var(--bg-1);
  margin-bottom: 20px;

  .highlighter-rouge & {
    background: var(--bg-1);
  }

  .lineno {
    text-align: right;
  }
}

[no_lineno],
.no_lineno {
  td:first-child {
    padding: 0;
    display: none;
  }
  .lineno {
    display: none;
  }
}

.key,
kbd {
  padding: 1px 4px;
  border-bottom: 2px solid var(--tx-3);
}

samp {
  background: inherit !important;
  color: var(--ac-1);
}

abbr {
  cursor: help;
}

.code-header {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2px 4px;
  color: var(--tx-1);
  background: var(--bg-3);
  border-bottom: 1px solid var(--bd-1);
  border-radius: calc($border-radius * 2) calc($border-radius * 2) 0 0;

  + .highlight {
    border-radius: 0 0 $border-radius $border-radius;
  }

  svg {
    pointer-events: none;
    color: var(--tx-1);
    width: 20px;
    height: 20px;
    display: inline-block;
    vertical-align: middle;
  }

  button {
    cursor: pointer;
    border: unset;
    color: unset;
    background: unset;
    position: relative;

    .icon-succeed {
      display: none;
      color: var(--green);
    }
  }

  .code-title {
    flex-grow: 1;
    font-size: 16px;
    margin-left: 10px;
  }

  .copy-tooltip {
    position: absolute;
    white-space: nowrap;
    pointer-events: none;
    bottom: 120%;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.5em;
    background: var(--bg-3);
    color: var(--tx-1);
    font-size: 0.8em;
    border-radius: 4px;
    opacity: 0;
    transition: opacity 0.2s ease;

    &.show {
      opacity: 1;
    }
  }
}

// Syntax highlighting styles should be adjusted appropriately for every theme
// List of tokens: https://github.com/rouge-ruby/rouge/wiki/List-of-tokens

/* prettier-ignore */
.highlight {
   --syntax-error: var(--red);
   // --syntax-string: #{$base04};
   --syntax-comment: #{$base03};
   .gl    { color: var(--syntax-string); } // Generic.Lineno
   .w     { color: var(--syntax-string); } // Text.Whitespace
   .bp    { color: var(--blue); } // Name.Builtin.Pseudo
   .c     { color: var(--syntax-comment); font-style: italic; } // Comment
   .c1    { color: var(--syntax-comment); font-style: italic; } // Comment.Single
   .cm    { color: var(--syntax-comment); font-style: italic; } // Comment.Multiline
   .cp    { color: var(--syntax-comment); font-style: italic; } // Comment.Preproc
   .cs    { color: var(--syntax-comment); font-style: italic; } // Comment.Special
   .err   { color: var(--syntax-error); } // Error
   .gd    { color: var(--syntax-error); } // Generic.Deleted
   .gi    { color: var(--green); } // Generic.Inserted
   .g     { color: var(--syntax-string); } // Generic
   .ge    { font-style: italic; text-decoration: underline } // Generic.Emph
   .gh    { color: var(--syntax-string); } // Generic.Heading
   .go    { color: var(--syntax-comment); } // Generic.Output
   .gp    { color: var(--brown); } // Generic.Prompt
   .gr    { color: var(--syntax-error); } // Generic.Error
   .gs    { font-weight: bold; } // Generic.Strong
   .gt    { color: var(--syntax-error); } // Generic.Traceback
   .gu    { color: var(--syntax-string); } // Generic.Subheading
   .il    { color: var(--orange); } // Literal.Number.Integer.Long
   .k     { color: var(--violet); font-weight: bold; } // Keyword
   .kc    { color: var(--violet); font-weight: bold; } // Keyword.Constant
   .kd    { color: var(--violet); font-weight: bold; } // Keyword.Declaration
   .kn    { color: var(--violet); font-weight: bold; } // Keyword.Namespace
   .kp    { color: var(--violet); font-weight: bold; } // Keyword.Pseudo
   .kr    { color: var(--violet); font-weight: bold; } // Keyword.Reserved
   .kt    { color: var(--violet); font-weight: bold; } // Keyword.Type
   .l     { color: var(--green); } // Literal
   .ld    { color: var(--green); } // Literal.Date
   .m     { color: var(--orange); } // Literal.Number
   .mb    { color: var(--orange); } // Literal.Number.Bin
   .mf    { color: var(--orange); } // Literal.Number.Float
   .mh    { color: var(--orange); } // Literal.Number.Hex
   .mi    { color: var(--orange); } // Literal.Number.Integer
   .mo    { color: var(--orange); } // Literal.Number.Oct
   .n     { color: var(--syntax-error); } // Name
   .na    { color: var(--yellow); } // Name.Attribute
   .nb    { color: var(--blue); } // Name.Builtin
   .nc    { color: var(--yellow); font-weight: bold; } // Name.Class
   .nd    { color: var(--yellow); } // Name.Decorator
   .ne    { color: var(--syntax-error); font-weight: bold; } // Name.Exception
   .nf    { color: var(--blue); } // Name.Function
   .ni    { color: var(--syntax-error); } // Name.Entity
   .nl    { color: var(--syntax-error); } // Name.Label
   .nn    { color: var(--syntax-error); } // Name.Namespace
   .no    { color: var(--orange); } // Name.Constant
   .nt    { color: var(--violet); } // Name.Tag
   .nv    { color: var(--orange); } // Name.Variable
   .nx    { color: var(--syntax-error); } // Name.Other
   .o     { color: var(--syntax-string); font-weight: bold; } // Operator
   .ow    { color: var(--syntax-string); font-weight: bold; } // Operator.Word
   .p     { color: var(--syntax-string); } // Punctuation
   .py    { color: var(--syntax-error); } // Name.Property
   .s     { color: var(--green); } // Literal.String
   .s1    { color: var(--green); } // Literal.String.Single
   .s2    { color: var(--green); } // Literal.String.Double
   .sb    { color: var(--green); } // Literal.String.Backtick
   .sc    { color: var(--green); } // Literal.String.Char
   .sd    { color: var(--green); } // Literal.String.Doc
   .se    { color: var(--cyan); } // Literal.String.Escape
   .sh    { color: var(--green); } // Literal.String.Heredoc
   .si    { color: var(--green); } // Literal.String.Interpol
   .sr    { color: var(--cyan); } // Literal.String.Regex
   .ss    { color: var(--green); } // Literal.String.Symbol
   .sx    { color: var(--green); } // Literal.String.Other
   .vc    { color: var(--orange); } // Name.Variable.Class
   .vg    { color: var(--orange); } // Name.Variable.Global
   .vi    { color: var(--orange); } // Name.Variable.Instance
   .x     { color: var(--brown); } // Other
 }
